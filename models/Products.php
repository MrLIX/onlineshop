<?php

namespace app\models;

use Faker\Provider\Color;
use PHPUnit\Util\Log\JSON;
use trntv\filekit\behaviors\UploadBehavior;
use Yii;
use yii\behaviors\TimestampBehavior;

/**
 * This is the model class for table "products".
 *
 * @property int $id
 * @property string $path
 * @property string $base_url
 * @property string $title_ru
 * @property string $title_en
 * @property string $content_ru
 * @property string $content_en
 * @property int $price
 * @property int $discount
 * @property int $discount_price
 * @property int $category_id
 * @property int $color_id
 * @property int $type_id
 * @property int $status
 * @property int $created_at
 * @property int $updated_at
 *
 * @property SubCategory $category
 * @property UserFavorites[] $userFavorites
 */
class Products extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */

    public $attachments;
    public $file;
    public $category;
    public $colors;
    public $id_color;
    public $types;
    public $id_type;
    public $buy_counts;
    public $id_count;


    public static function tableName()
    {
        return 'products';
    }
    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
            ],
            [
                'class' => UploadBehavior::className(),
                'attribute' => 'file',
                'pathAttribute' => 'path',
                'baseUrlAttribute' => 'base_url',
            ],
            [
                'class' => UploadBehavior::className(),
                'attribute' => 'attachments',
                'multiple' => true,
                'uploadRelation' => 'productImages',
                'pathAttribute' => 'path',
                'baseUrlAttribute' => false,
            ],

        ];
    }
   public function beforeSave($insert)
   {
       $this->color_id = \yii\helpers\Json::encode(array_values($this->id_color));
       $this->type_id = \yii\helpers\Json::encode(array_values($this->id_type));
       $this->buy_count = \yii\helpers\Json::encode(array_values($this->id_count));

       return parent::beforeSave($insert); // TODO: Change the autogenerated stub
   }

   public function afterFind()
   {
       $color = \yii\helpers\Json::decode($this->color_id);
       $colors = Colors::findAll($color);

       if(!empty($colors)){
           $k = 0;
           foreach ($colors as $item){
               $this->colors[$k]['id_color'] = $item->id;
           $k++;
           }
       }

       $type = \yii\helpers\Json::decode($this->type_id);
       $types = Types::findAll($type);
       if(!empty($types)){
           $j = 0;
           foreach ($types as $item){
               $this->types[$j]['id_type'] = $item->id;
               $j++;
           }
       }

       $count = \yii\helpers\Json::decode($this->buy_count);
       if(!empty($count)){
           $i = 0;
           foreach ($count as $item){
               $this->buy_counts[$i]['id_count'] = $item;
               $i++;
           }
       }


       parent::afterFind(); // TODO: Change the autogenerated stub
   }


    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['title_en','title_ru','category_id','price'],'required'],
            [['content_ru', 'content_en','buy_count'], 'string'],
            [['price', 'discount', 'discount_price', 'category_id', 'status', 'created_at', 'updated_at'], 'integer'],
            [['path', 'base_url', 'title_ru', 'title_en','color_id', 'type_id'], 'string', 'max' => 255],
            [['category_id'], 'exist', 'skipOnError' => true, 'targetClass' => SubCategory::className(), 'targetAttribute' => ['category_id' => 'id']],
            [['attachments', 'file','colors','types','id_color','id_type', 'buy_counts','id_count'], 'safe']
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'path' => Yii::t('app', 'Image'),
            'base_url' => Yii::t('app', 'Base Url'),
            'title_ru' => Yii::t('app', 'Title Ru'),
            'title_en' => Yii::t('app', 'Title En'),
            'content_ru' => Yii::t('app', 'Content Ru'),
            'content_en' => Yii::t('app', 'Content En'),
            'price' => Yii::t('app', 'Price'),
            'discount' => Yii::t('app', 'Discount'),
            'discount_price' => Yii::t('app', 'Discount Price'),
            'category_id' => Yii::t('app', 'Category ID'),
            'color_id' => Yii::t('app', 'Colors'),
            'type_id' => Yii::t('app', 'Types'),
            'buy_count' => Yii::t('app', 'Buy counts'),
            'status' => Yii::t('app', 'Available'),
            'created_at' => Yii::t('app', 'Created At'),
            'updated_at' => Yii::t('app', 'Updated At'),
            'attachments' => Yii::t('app', 'Images'),
            'file' => Yii::t('app', 'Main image'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSubCategory()
    {
        return $this->hasOne(SubCategory::className(), ['id' => 'category_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUserFavorites()
    {
        return $this->hasMany(UserFavorites::className(), ['product_id' => 'id']);
    }

    public function getProductImages()
    {
        return $this->hasMany(ProductImages::className(), ['product_id' => 'id']);
    }

    public function getTitle(){

        if (Yii::$app->language == 'ru'):  return $this->title_ru;

        endif;
        if (Yii::$app->language == 'en'):  return $this->title_en;

        endif;
    }

    public function getContent(){

        if (Yii::$app->language == 'ru'):  return $this->content_ru;

        endif;
        if (Yii::$app->language == 'en'):  return $this->content_en;

        endif;
    }

    /**
     * @param $product
     * @param $color
     * @param $type
     * @param $qty
     * @return bool
     */
    public function addToCart($product, $color, $type, $qty)
    {

        if ($product->discount_price == 0) {
            $price = $product->price;
        } else {
            $price = $product->discount_price;
        }

        $session = Yii::$app->session['cart'];
        if(!empty($session)){
            $session = $_SESSION['cart'];
            $a = 0;
            foreach ($session as $k => $item){
                if(($item['id'] == $product->id) && ($item['color'] == $color->title) && ($item['type'] == $type->title)){
                    $a = 1;
                    $key = $k;
                }
            }
            if($a == 1){
                return 2;
            } else{
                $_SESSION['cart'][] = [
                    'id' => $product->id,
                    'qty' => $qty,
                    'color' => $color->title,
                    'type' => $type->title,
                    'name' => $product->title,
                    'price' => $price,
                    'img' => $product->path,
                ];
            }

        } else {
            $_SESSION['cart'][] = [
                'id' => $product->id,
                'qty' => $qty,
                'color' => $color->title,
                'type' => $type->title,
                'name' => $product->title,
                'price' => $price,
                'img' => $product->path,
            ];
        }
        $_SESSION['cart.qty'] = isset($_SESSION['cart.qty']) ? $_SESSION['cart.qty'] + $qty : $qty;
        $_SESSION['cart.sum'] = isset($_SESSION['cart.sum']) ? $_SESSION['cart.sum'] + $qty * $price : $qty * $price;
        return true;
    }

    public function changeQtyCart($product, $color, $type, $qty)
    {

        if ($product->discount_price == 0) {
            $price = $product->price;
        } else {
            $price = $product->discount_price;
        }

        $session = Yii::$app->session['cart'];
        if(!empty($session)){
            $session = $_SESSION['cart'];
            $a = 0;
            foreach ($session as $k => $item){
                if(($item['id'] == $product->id) && ($item['color'] == $color) && ($item['type'] == $type)){
                    $a = 1;
                    $key = $k;
                }
            }
            if($a == 1){
                return 2;
            } else{
                $_SESSION['cart'][] = [
                    'id' => $product->id,
                    'qty' => $qty,
                    'color' => $color,
                    'type' => $type,
                    'name' => $product->title,
                    'price' => $price,
                    'img' => $product->path,
                ];
            }

        } else {
            $_SESSION['cart'][] = [
                'id' => $product->id,
                'qty' => $qty,
                'color' => $color,
                'type' => $type,
                'name' => $product->title,
                'price' => $price,
                'img' => $product->path,
            ];
        }
        $_SESSION['cart.qty'] = isset($_SESSION['cart.qty']) ? $_SESSION['cart.qty'] + $qty : $qty;
        $_SESSION['cart.sum'] = isset($_SESSION['cart.sum']) ? $_SESSION['cart.sum'] + $qty * $price : $qty * $price;
        return true;
    }


    public function recalc($product_id, $color, $type)
    {
        $session = Yii::$app->session['cart'];
        foreach ($session as $key => $item){
            if(($item['id'] == $product_id) && ($item['color'] == $color) && ($item['type'] == $type)){
                $price = $item['price'];
                $qty = $item['qty'];
                $_SESSION['cart.qty'] -= $qty;
                $_SESSION['cart.sum'] -= $qty * $price;
                unset($_SESSION['cart'][$key]);

            }
        }
        return false;

    }

}
